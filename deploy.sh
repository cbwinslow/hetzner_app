#!/bin/bash

set -e # Exit immediately if a command exits with a non-zero status.

# --- Source Configuration ---
if [ -f "config.sh" ]; then
  source config.sh
else
  echo "ERROR: config.sh not found. Please create it before running this script."
  exit 1
fi

# --- Check for Root Privileges ---
if [ "\$EUID" -ne 0 ]; then
  echo "This script must be run as root or with sudo."
  exit 1
fi

echo "==================================================================="
echo " Deploying Production-Ready Super Stack"
echo "==================================================================="
echo "Domain: $DOMAIN"
echo "App Root: $APP_ROOT"
echo "Web Root: $WEB_ROOT"
echo "==================================================================="

# --- Section 1: Create Directories and Permissions ---
echo "--> [1/5] Creating directories and setting permissions..."
mkdir -p "$WEB_ROOT"
mkdir -p "$APP_ROOT"/{traefik,n8n_data,fastapi_app,nextjs_app,prometheus,grafana/provisioning/{datasources,dashboards},loki,promtail,opensearch/config,opensearch-dashboards/config,supabase}
touch "$APP_ROOT/traefik/acme.json"
chmod 600 "$APP_ROOT/traefik/acme.json"
chown -R www-data:www-data "$WEB_ROOT"
echo "Directories created."

# --- Section 2: Create Secure .env File ---
echo "--> [2/5] Creating secure .env file..."
# Generate a hashed password for Traefik basic auth
export TRAEFIK_ADMIN_PASSWORD_HASH=\$(htpasswd -nb admin "\$TRAEFIK_ADMIN_PASSWORD")

cat <<EOF > "$APP_ROOT/.env"
# --- Production Environment Variables ---
# This file is generated by the deploy.sh script.
# Review and save these passwords, especially after the first run.

# --- Core Deployment Config ---
DOMAIN=${DOMAIN}
LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
TRAEFIK_ADMIN_PASSWORD_HASH=${TRAEFIK_ADMIN_PASSWORD_HASH}

# --- PostgreSQL (Supabase) ---
# Note: The full DATABASE_URL is constructed by services that need it.
# These are the raw components for various clients.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
POSTGRES_DB=postgres
# Full URL for services that need it (like Graphiti)
DATABASE_URL=postgresql://\${POSTGRES_USER}:\${POSTGRES_PASSWORD}@supabase:5432/\${POSTGRES_DB}

# --- Neo4j (Knowledge Graph) ---
NEO4J_USER=neo4j
NEO4J_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)
NEO4J_URI=bolt://neo4j:7687

# --- LLM & Embedding Providers (LocalAI) ---
# For the new agent, we point LLM and Embedding providers to our LocalAI container.
LLM_PROVIDER=openai
LLM_BASE_URL=http://localai:8080/v1
LLM_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
LLM_CHOICE=gpt-4.1-mini

EMBEDDING_PROVIDER=openai
EMBEDDING_BASE_URL=http://localai:8080/v1
EMBEDDING_API_KEY=sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
EMBEDDING_MODEL=text-embedding-3-small
VECTOR_DIMENSION=1536

# A faster model for ingestion tasks
INGESTION_LLM_CHOICE=gpt-4.1-nano

# --- n8n Workflow Automation ---
N8N_BASIC_AUTH_USER=admin
N8N_BASIC_AUTH_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)

# --- Flowise Prototyping UI ---
FLOWISE_USERNAME=admin
FLOWISE_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32)

# --- Supabase Auth ---
# These keys are generated by Supabase on its first run.
# You will need to run `docker-compose exec supabase supabase status` to get them
# and then add them here.
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=
SUPABASE_JWT_SECRET=$(head /dev/urandom | tr -dc A-Za-z0-9_ | head -c 64)

# --- Application Config ---
APP_ENV=production
LOG_LEVEL=INFO
APP_PORT=8058
EOF
echo ".env file created in $APP_ROOT/.env. Please review and save these passwords."

# --- Section 3: Create OpenTelemetry Collector Config ---
echo "--> [3/6] Creating OpenTelemetry Collector configuration..."
cat <<'EOF' > "$APP_ROOT/otel-collector-config.yaml"
receivers:
  otlp:
    protocols:
      grpc:
      http:

processors:
  batch:

exporters:
  logging:
    loglevel: debug
  otlp/jaeger:
    endpoint: "jaeger:4317"
    tls:
      insecure: true

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [logging, otlp/jaeger]
EOF
echo "OpenTelemetry Collector config created."

# --- Section 4: Create Production Docker Compose ---
echo "--> [4/6] Creating production docker-compose.yml..."
echo "--> [4/6] Creating production docker-compose.yml..."
cat <<'EOF' > "$APP_ROOT/docker-compose.yml"
version: '3.8'

networks:
  devops-net:
    driver: bridge

volumes:
  supabase_data:
  n8n_data:
  qdrant_data:
  localai_models:
  neo4j_data:
  flowise_data:
  jaeger_data:

services:
  # --- 1. Edge Router & Load Balancer ---
  traefik:
    image: traefik:v2.10
    container_name: traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.myresolver.acme.tlschallenge=true
      - --certificatesresolvers.myresolver.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/etc/traefik/acme.json
    ports: ["80:80", "443:443"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/acme.json:/etc/traefik/acme.json
    networks: [devops-net]
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:${TRAEFIK_ADMIN_PASSWORD_HASH}"

  # --- 2. Frontend UI ---
  nextjs_app:
    build: { context: /var/www/html/super-stack, dockerfile: Dockerfile }
    container_name: nextjs_app
    networks: [devops-net]
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextjs.rule=Host(`${DOMAIN}`) || Host(`www.${DOMAIN}`)"
      - "traefik.http.routers.nextjs.entrypoints=websecure"
      - "traefik.http.routers.nextjs.tls.certresolver=myresolver"
      - "traefik.http.services.nextjs.loadbalancer.server.port=3000"
      # Rule to proxy OpenTelemetry traces from the frontend to the collector
      - "traefik.http.routers.otel.rule=Host(`${DOMAIN}`) && PathPrefix(`/otel`)"
      - "traefik.http.routers.otel.entrypoints=websecure"
      - "traefik.http.routers.otel.tls.certresolver=myresolver"
      - "traefik.http.services.otel.loadbalancer.server.port=4318" # OTLP HTTP port on the collector

  # --- 3. Backend API (Agentic Logic) ---
  fastapi_app:
    build: { context: ./fastapi_app }
    container_name: fastapi_app
    networks: [devops-net]
    env_file: .env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`api.${DOMAIN}`)"
      - "traefik.http.routers.fastapi.entrypoints=websecure"
      - "traefik.http.routers.fastapi.tls.certresolver=myresolver"
      - "traefik.http.services.fastapi.loadbalancer.server.port=${APP_PORT:-8058}"

  # --- 4. Workflow Automation ---
  n8n:
    image: n8nio/n8n
    container_name: n8n
    volumes: [n8n_data:/home/node/.n8n]
    networks: [devops-net]
    env_file: .env
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=myresolver"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"

  # --- 5. Database & Auth (PostgreSQL) ---
  supabase:
    image: supabase/cli:latest
    container_name: supabase
    command: start
    volumes: ["./supabase:/project", "supabase_data:/var/lib/postgresql/data"]
    networks: [devops-net]
    env_file: .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    # No ports exposed to the web

  # --- 6. Knowledge Graph Database ---
  neo4j:
    image: neo4j:5
    container_name: neo4j
    volumes: [neo4j_data:/data]
    networks: [devops-net]
    env_file: .env
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
    # No ports exposed to the web

  # --- 7. Vector Database ---
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    volumes: [qdrant_data:/qdrant/storage]
    networks: [devops-net]
    # No ports exposed to the web

  # --- 8. Local AI Model Serving ---
  localai:
    image: quay.io/go-skynet/local-ai:latest
    container_name: localai
    volumes: [localai_models:/models]
    command: ["/usr/bin/local-ai", "--models-path", "/models"]
    networks: [devops-net]
    # No ports exposed to the web

  # --- 9. AI Prototyping UI (Flowise) ---
  flowise:
    image: flowiseai/flowise:latest
    container_name: flowise
    volumes: [flowise_data:/root/.flowise]
    networks: [devops-net]
    env_file: .env
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - FLOWISE_USERNAME=${FLOWISE_USERNAME}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flowise.rule=Host(`flowise.${DOMAIN}`)"
      - "traefik.http.routers.flowise.entrypoints=websecure"
      - "traefik.http.routers.flowise.tls.certresolver=myresolver"
      - "traefik.http.services.flowise.loadbalancer.server.port=3000"

  # --- 10. Observability (Collector) ---
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    networks: [devops-net]
    depends_on:
      - jaeger

  # --- 11. Observability (Tracing UI) ---
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    volumes: [jaeger_data:/badger]
    networks: [devops-net]
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`jaeger.${DOMAIN}`)"
      - "traefik.http.routers.jaeger.entrypoints=websecure"
      - "traefik.http.routers.jaeger.tls.certresolver=myresolver"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686" # Jaeger UI Port
EOF
echo "docker-compose.yml created."

# --- Section 4: Copy Application Code ---
echo "--> [4/6] Copying application code to production directories..."
# Copy the entire backend application
cp -r "$(pwd)/fastapi_app/." "$APP_ROOT/fastapi_app/"
# Copy the entire frontend application
cp -r "$(pwd)/nextjs_app/." "$WEB_ROOT/"
chown -R www-data:www-data "$WEB_ROOT"
echo "Application code copied."

# --- Section 5: Create Helper Scripts ---
echo "--> [5/5] Creating helper scripts..."
cat <<EOF > "$APP_ROOT/grafana/provisioning/datasources/datasources.yml"
apiVersion: 1
datasources:
  - name: Prometheus
    type: prometheus
    url: http://prometheus:9090
    access: proxy
    isDefault: true
  - name: Loki
    type: loki
    url: http://loki:3100
    access: proxy
  - name: Jaeger
    type: jaeger
    url: http://jaeger:16686
    access: proxy
EOF
cat <<EOF > "/usr/local/bin/setup_firewall.sh"
#!/bin/bash
echo "Configuring firewall (ufw)..."
ufw default deny incoming
ufw default allow outgoing
ufw allow ssh
ufw allow http
ufw allow https
ufw --force enable
echo "Firewall enabled. Only SSH, HTTP, and HTTPS are allowed."
EOF
chmod +x "/usr/local/bin/setup_firewall.sh"
echo "Firewall script created at /usr/local/bin/setup_firewall.sh"

echo "==================================================================="
echo " Deployment Script Finished"
echo "==================================================================="
echo "NEXT STEPS:"
echo "1. Edit 'config.sh' with your domain, email, and passwords."
echo "2. Run this script again: sudo ./deploy.sh"
echo "3. Run the firewall script ONCE: sudo /usr/local/bin/setup_firewall.sh"
echo "4. Start the services: cd $APP_ROOT && sudo docker-compose up -d"
echo "5. Run the post-deployment setup script to initialize the database and get API keys:"
echo "   cd $APP_ROOT && sudo ../post-deploy-setup.sh"
echo "==================================================================="
